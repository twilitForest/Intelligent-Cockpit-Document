//
// CONFIDENTIAL - FORD MOTOR COMPANY
//
// This is an unpublished work, which is a trade secret, created in
// 2017.  Ford Motor Company owns all rights to this work and intends
// to maintain it in confidence to preserve its trade secret status.
// Ford Motor Company reserves the right to protect this work as an
// unpublished copyrighted work in the event of an inadvertent or
// deliberate unauthorized publication.  Ford Motor Company also
// reserves its rights under the copyright laws to protect this work
// as a published work.  Those having access to this work may not copy
// it, use it, or disclose the information contained in it without
// the written authorization of Ford Motor Company.
//

syntax = "proto2";
option optimize_for = CODE_SIZE;

package fnv.soa.framework;

/**
* @fnv_proto
* Contains SOA context data needed for SOA framework layer communication
* piggy backed on user SOA messages.
* These fields are not added or accessed by users.
* The intended use for this field as part of the SoaMessage class 
* is for user initiated requests and responses within SOA features that
* require special data to operate.
* First uses of this context data includes extra fields used for the 
* on-demand broadcast feature.
* @fnv_topic all topics
* @fnv_scope ECG_INTERNAL
* @fnv_api_source INTERNAL
* @fnv_message_version 1.0
*/
message SoaContext
{
	// Is the carrier SoaMessage empty, i.e. no data of it's own
    optional bool emptycarrier           = 100;

	// MQTT Client ID of client. Identifies the connection used.
    optional string clientid             = 101;

	// Consumer's raw endpoint. This is not the response endpoint
    optional string consumerbaseendpoint = 102;

    // Service Provider's endpoint - used internally, may differ from SoaMessage field
    optional string providerendpoint     = 103;

    // Data broadcast endpoint - used internally, may differ from SoaMessage field
    optional string dataendpoint         = 104;

    // SoaHandle - included only as part of the context for asynchronous calls
    optional int64 soahandle             = 105;

    // SOA Framework internal command
    optional int32 soacommand            = 106;

    // SOA Framework internal transaction id
    optional string soatransactionid     = 107;

    // SOA Framework version
    optional string soaversion           = 108;
    
    // ECU ID
    optional string ecuid                = 109;
    
    // Process Id on the ECU
    optional int32 processID             = 110 [default = -1];
}
