syntax = "proto2";
//	Ford Telematics Communication Protocol
//  Feature/Enabler/Common: Common
//	Version Number: 6.0.9
//	Date Revised: 07/08/2019
// 	Last Updated By: Vijai Thoppae [VTHOPPAE]
// 	Reviewed By:Murali Chitturi,Rumeli Das[RDAS9],Mageshwaran Mohan [MMOHAN17]
// 	Ford Confidential
//
//************************************************************************************************************************************************************************
//CHANGE LOG on 10/18/2018 for version 6.0.4
//************************************************************************************************************************************************************************
	// Updated the Enumeration "MessageType"
		// Removed classifications for the message types
	// Split ProvisioningState and Authorization state
	// Created ProvisioingStatusENUM and AuthStatusENUM
	// Added both status in commonFromVehicle
	// Removed functionId and functionCfgId from VehicleMessageHader
//************************************************************************************************************************************************************************
//CHANGE LOG on 09/07/2018 for version 6.0.2
//************************************************************************************************************************************************************************
	// Packaging of proto files have been introduced and referenced
	// Added syntax = "proto2" to the header
	// Reordered tags
	// Removed expiryDateTime and priority
//************************************************************************************************************************************************************************
//CHANGE LOG on 06/20/2018 for version 6.0.1
//************************************************************************************************************************************************************************
	// Added Command
		// ECURebootCommand
	// Added CommandResponse
		// ECURebootCommandResponse
	// Added Alert
		// ECURebootAlert
	// Moved VehicleMessageHeader from FCI.proto
//************************************************************************************************************************************************************************
// Added for FNV2 Architecture, ECG : Base and Apps dependencies
//************************************************************************************************************************************************************************
package com.ford.ftcp.appcommon;

import "ErrorAndStatus.proto";

// Message structure for FCI, Generic Message/Event Header
message VehicleMessageHeader{
	// Common message structure for all messages sent from Cloud. Cloud shall always set this.
	optional CommonFromCloud cloudCommon = 1;
	// Common message structure for all messages sent from Vehicle. Vehicle Module shall always set this.
	optional CommonFromVehicle vehicleCommon  =2;
	// Enumeration to specify Message Type
	optional MessageType msgType = 3; // Added to retain/capture current classification
	// Function Data message name
	// e.g., LockCommand / LockCommandResponse, OnlineTrafficQuery / OnlineTrafficQueryResponse
	optional string functionMsgName = 4;
	// Feature specific function message based on FTCP, feature/app specific proto file
	// e.g., LockCommand / LockCommandResponse [Apps], OnlineTrafficQuery / OnlineTrafficQueryResponse
	// e.g., Provisioning Alert [SPCM - CCS, RVCM, Provisioning]
	optional bytes functionData = 5;
}

// Enumeration for Message/Event Type
enum MessageType {
    ALERT = 0;
    ALERT_RESPONSE = 1;
    COMMAND = 2;
    COMMAND_RESPONSE = 3;
    QUERY = 4;
    QUERY_RESPONSE = 5;

	//Standalone messages handled by FCI
    CONNECTION_STATUS_ALERT = 6;
    MODULE_SECURITY_ERROR = 7;
    SERVER_SECURITY_ERROR = 8;
}


// Message structure for common data elements always sent from the ECU(ECG) to the cloud
message CommonFromCloud{
	// UTC Modem Date Time when cloud sends a message to the ECU(ECG) - This is populated from System time
	optional UTCDateTime cloudUTCDateTime = 1; //UTC cloud Date Time
	// Unique random number generated by the Cloud. Cloud shall always set this value to a unique number
	optional uint32 cloudMessageId = 2;
	//Cloud shall always populate this with the messageid of Query message
	//Cloud shall always set this in all query response messages
	optional uint32 correlationId = 3;
}

// Message structure for common data elements always sent from the Vehicle ECU(ECG) to the cloud
message CommonFromVehicle{
	//UTC Modem Date Time of in-car event (not time sent) - This is populated from cell towers
	optional UTCDateTime modemUTCDateTime = 1;
	// Vehicle Identification Number. All alpha numeric values of the VIN shall be in Upper case.
	optional string vin = 2;
	// Electronic Serial Number of the ECU(ECG) - DID F18C
	optional string esn = 3;
	// ESN supplied/assigned by Ford for the ECU - DID F17E
	optional string fesn = 4;
	// Unique random number generated by the ECU(ECG). ECU(ECG) shall always set this value to a unique number
	optional uint32 messageId = 5;
	// ECU(ECG) shall set this field with same "messageId" received from the cloud.
	optional uint32 correlationId = 6;
	// Master ECU Current Authorization Status
	optional AuthStatusENUM authStatus = 7;
	// HEC time at the time the event occurred - CGEA Only
	optional HECDateTime inCarHecTime = 8;
	// ECU(ECG/FCI) Current protofile Version Number
	optional string protofileVersion = 9;
	// ECU(ECG) shall always set this from its internal RTC timestamp(synchronized from modem and/or GPS timestamp)
	optional UTCDateTime internalRTCDateTime = 10;
	// ECU(ECG) shall set this flag for SDN to anonymous PII data
	optional AnonymizationStatusENUM anonymizationStatus = 11;
	// Provisioning state of ECG
	optional ECGProvisioningStatusENUM provisioningStatus = 12;

	enum AnonymizationStatusENUM{
		OFF = 0;
		ON = 1;
	}
}

// Message structure for capturing UTCDateTime (not from CAN signals)
// This message structure is used by both Cloud and Vehicle for capturing real timestamp.
// Cloud shall populate this from System time and vehicle shall populate this from carrier cellular network
message UTCDateTime{
	// UTC year from cellular network(from ECG/TCU)
	optional int32 UTCYear = 1;
	// UTC month from cellular network(from ECG/TCU)
	optional int32 UTCMonth = 2;
	// UTC day from cellular network(from ECG/TCU)
	optional int32 UTCDay = 3;
	// UTC hours from cellular network(from ECG/TCU)
	optional int32 UTCHour = 4;
	// UTC minutes from cellular network(from ECG/TCU)
	optional int32 UTCMin = 5;
	// UTC seconds from cellular network(from ECG/TCU)
	optional int32 UTCSecond = 6;
	// UTC nanos from cellular network(from ECG/TCU)
	optional int32 UTCMillis = 7;
}

// Message structure for capturing HECDateTime - for CGEA ONLY
message HECDateTime{
	// Global clock year signal
	optional int32 GlblClkYr_No_Actl = 1;
	// ECG/ECU translates this by looking at the julian day from CAN bus.
	// Use global clock signal GlblClkDay_No_Actl to come up with month to be used here.
	optional int32 month = 2;
	// This is the julian Day as available on CAN bus. Global clock julian day signal.
	optional int32  GlblClkDay_No_Actl = 3;
	// Global clock hour signal
	optional int32 GlblClkHr_No_Actl = 4;
	// Global clock minute signal
	optional int32 GlblClkMnte_No_Actl = 5;
	// global clock second signal.
	optional int32 GlblClkScnd_No_Actl = 6;
}

// Enumeration for ECG Provisioning status
enum ECGProvisioningStatusENUM{
	// Default ECG/ECU status at the factory at B+ while DTC E10000 is still there.
	FACTORY_MODE = 0;
	// ECG/ECU shall enter this mode when DTC E10000 is cleared and waiting to be provisioned.
	UNPROVISIONED = 1;
	// ECG shall set this mode after sending ECGProvisioningAlert(and receiving ACK) and waiting for
	// ECGProvisioningAlertResponse message
	WAITING_FOR_ECG_PROVISIONING_RESPONSE = 2;
	// ECG shall set this mode after sending TCUProvisioningAlert(and receiving ACK) and waiting for
	// TCUProvisioningAlertResponse message
	WAITING_FOR_TCU_PROVISIONING_RESPONSE = 3;
	// ECG shall set this state after receiving TCU Provisioning Alert Response
	WAITING_FOR_HOME_URL = 4;
	// ECG shall set this state after receiving home URL (via) and MQTT token receipt of
	// ChangeHomeURLCommandResponse
	CONNECTING_TO_HOME_URL = 5;
	// ECG shall set this state after connecting to home URL(receiving ACK for ConnectionStatusAlert)
	// and provisioned.
	PROVISIONED = 6;
}

// Enumertion for ECG authorization status
enum AuthStatusENUM{
	// Not authorized to any users
	NOT_AUTHORIZED = 0;
	// Vehicle Authorized to a user
	AUTHORIZED = 1;
}


//Message structure Command to request a reboot of an ECU e.g. TCU, SYNC
message ECURebootCommand{
	// ECU ID : Electronic Control Unit ID
	optional int32 ECUId = 1;
}

//Response of ECURebootCommand. TCU shall always set this
message ECURebootCommandResponse{
	// Enumeration for CommandStatus. ECU(ECG/TCU) shall always set this.
	optional CommandStatusEnum status = 1;
	// Message structure for error details. ECU(ECG/TCU) shall only set this upon any error condition based upon known failure modes (eCall Mode / OTA download / unknown errors)
	optional ErrorDetail errorDetail = 2;
}

//ECG shall set this ECURebootAlert only if Reboot Command is successful
message ECURebootAlert{
	// ECU Reboot Status
	optional ECURebootStatusENUM ecuRebootStatus = 1;
	// Set Error code only when ECURebootStatusENUM is FAILED
	optional ECURebootErrorENUM ecuRebootErrorCode = 2;

	// ECU Reboot Status Codes
	enum ECURebootStatusENUM{
		// Based upon ECU Id sets this Failed status, if the reboot fails for unknown reasons
		FAILED = 0;
		// Based upon ECU Id sets this status if the reboot request is successful
		SUCCESS = 1;
	}

	//Reasons/Error codes for reboot failures
	enum ECURebootErrorENUM{
		FAILED_TO_REBOOT = 0;
		ECU_NO_RESPONSE = 1;
		COMMAND_NOT_PERMITTED = 2;
		OTHER_ERROR = 3;
	}
}
