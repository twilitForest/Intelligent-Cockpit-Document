// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceContract.proto

#ifndef PROTOBUF_ServiceContract_2eproto__INCLUDED
#define PROTOBUF_ServiceContract_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Endpoint.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ServiceContract_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceContractImpl();
void InitDefaultsServiceContract();
inline void InitDefaults() {
  InitDefaultsServiceContract();
}
}  // namespace protobuf_ServiceContract_2eproto
namespace fnv {
namespace soa {
namespace framework {
namespace protobuf {
class ServiceContract;
class ServiceContractDefaultTypeInternal;
extern ServiceContractDefaultTypeInternal _ServiceContract_default_instance_;
}  // namespace protobuf
}  // namespace framework
}  // namespace soa
}  // namespace fnv
namespace fnv {
namespace soa {
namespace framework {
namespace protobuf {

// ===================================================================

class ServiceContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fnv.soa.framework.protobuf.ServiceContract) */ {
 public:
  ServiceContract();
  virtual ~ServiceContract();

  ServiceContract(const ServiceContract& from);

  inline ServiceContract& operator=(const ServiceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceContract(ServiceContract&& from) noexcept
    : ServiceContract() {
    *this = ::std::move(from);
  }

  inline ServiceContract& operator=(ServiceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceContract* internal_default_instance() {
    return reinterpret_cast<const ServiceContract*>(
               &_ServiceContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceContract* other);
  friend void swap(ServiceContract& a, ServiceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceContract* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string commandID = 4;
  int commandid_size() const;
  void clear_commandid();
  static const int kCommandIDFieldNumber = 4;
  const ::std::string& commandid(int index) const;
  ::std::string* mutable_commandid(int index);
  void set_commandid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_commandid(int index, ::std::string&& value);
  #endif
  void set_commandid(int index, const char* value);
  void set_commandid(int index, const char* value, size_t size);
  ::std::string* add_commandid();
  void add_commandid(const ::std::string& value);
  #if LANG_CXX11
  void add_commandid(::std::string&& value);
  #endif
  void add_commandid(const char* value);
  void add_commandid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& commandid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_commandid();

  // repeated string ftcpCommandID = 5;
  int ftcpcommandid_size() const;
  void clear_ftcpcommandid();
  static const int kFtcpCommandIDFieldNumber = 5;
  const ::std::string& ftcpcommandid(int index) const;
  ::std::string* mutable_ftcpcommandid(int index);
  void set_ftcpcommandid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ftcpcommandid(int index, ::std::string&& value);
  #endif
  void set_ftcpcommandid(int index, const char* value);
  void set_ftcpcommandid(int index, const char* value, size_t size);
  ::std::string* add_ftcpcommandid();
  void add_ftcpcommandid(const ::std::string& value);
  #if LANG_CXX11
  void add_ftcpcommandid(::std::string&& value);
  #endif
  void add_ftcpcommandid(const char* value);
  void add_ftcpcommandid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ftcpcommandid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ftcpcommandid();

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .fnv.soa.framework.protobuf.Endpoint endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::fnv::soa::framework::protobuf::Endpoint& endpoint() const;
  ::fnv::soa::framework::protobuf::Endpoint* release_endpoint();
  ::fnv::soa::framework::protobuf::Endpoint* mutable_endpoint();
  void set_allocated_endpoint(::fnv::soa::framework::protobuf::Endpoint* endpoint);

  // optional .fnv.soa.framework.protobuf.Endpoint hostEndpoint = 3;
  bool has_hostendpoint() const;
  void clear_hostendpoint();
  static const int kHostEndpointFieldNumber = 3;
  const ::fnv::soa::framework::protobuf::Endpoint& hostendpoint() const;
  ::fnv::soa::framework::protobuf::Endpoint* release_hostendpoint();
  ::fnv::soa::framework::protobuf::Endpoint* mutable_hostendpoint();
  void set_allocated_hostendpoint(::fnv::soa::framework::protobuf::Endpoint* hostendpoint);

  // @@protoc_insertion_point(class_scope:fnv.soa.framework.protobuf.ServiceContract)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_version();
  void clear_has_version();
  void set_has_hostendpoint();
  void clear_has_hostendpoint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> commandid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ftcpcommandid_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::fnv::soa::framework::protobuf::Endpoint* endpoint_;
  ::fnv::soa::framework::protobuf::Endpoint* hostendpoint_;
  friend struct ::protobuf_ServiceContract_2eproto::TableStruct;
  friend void ::protobuf_ServiceContract_2eproto::InitDefaultsServiceContractImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceContract

// optional .fnv.soa.framework.protobuf.Endpoint endpoint = 1;
inline bool ServiceContract::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceContract::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceContract::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fnv::soa::framework::protobuf::Endpoint& ServiceContract::endpoint() const {
  const ::fnv::soa::framework::protobuf::Endpoint* p = endpoint_;
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceContract.endpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::fnv::soa::framework::protobuf::Endpoint*>(
      &::fnv::soa::framework::protobuf::_Endpoint_default_instance_);
}
inline ::fnv::soa::framework::protobuf::Endpoint* ServiceContract::release_endpoint() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.protobuf.ServiceContract.endpoint)
  clear_has_endpoint();
  ::fnv::soa::framework::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
inline ::fnv::soa::framework::protobuf::Endpoint* ServiceContract::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) {
    endpoint_ = new ::fnv::soa::framework::protobuf::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceContract.endpoint)
  return endpoint_;
}
inline void ServiceContract::set_allocated_endpoint(::fnv::soa::framework::protobuf::Endpoint* endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(endpoint_);
  }
  if (endpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.protobuf.ServiceContract.endpoint)
}

// optional string version = 2;
inline bool ServiceContract::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceContract::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceContract::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceContract::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ServiceContract::version() const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceContract.version)
  return version_.GetNoArena();
}
inline void ServiceContract::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceContract.version)
}
#if LANG_CXX11
inline void ServiceContract::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fnv.soa.framework.protobuf.ServiceContract.version)
}
#endif
inline void ServiceContract::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.protobuf.ServiceContract.version)
}
inline void ServiceContract::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.protobuf.ServiceContract.version)
}
inline ::std::string* ServiceContract::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceContract.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceContract::release_version() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.protobuf.ServiceContract.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceContract::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.protobuf.ServiceContract.version)
}

// optional .fnv.soa.framework.protobuf.Endpoint hostEndpoint = 3;
inline bool ServiceContract::has_hostendpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceContract::set_has_hostendpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceContract::clear_has_hostendpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fnv::soa::framework::protobuf::Endpoint& ServiceContract::hostendpoint() const {
  const ::fnv::soa::framework::protobuf::Endpoint* p = hostendpoint_;
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceContract.hostEndpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::fnv::soa::framework::protobuf::Endpoint*>(
      &::fnv::soa::framework::protobuf::_Endpoint_default_instance_);
}
inline ::fnv::soa::framework::protobuf::Endpoint* ServiceContract::release_hostendpoint() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.protobuf.ServiceContract.hostEndpoint)
  clear_has_hostendpoint();
  ::fnv::soa::framework::protobuf::Endpoint* temp = hostendpoint_;
  hostendpoint_ = NULL;
  return temp;
}
inline ::fnv::soa::framework::protobuf::Endpoint* ServiceContract::mutable_hostendpoint() {
  set_has_hostendpoint();
  if (hostendpoint_ == NULL) {
    hostendpoint_ = new ::fnv::soa::framework::protobuf::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceContract.hostEndpoint)
  return hostendpoint_;
}
inline void ServiceContract::set_allocated_hostendpoint(::fnv::soa::framework::protobuf::Endpoint* hostendpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hostendpoint_);
  }
  if (hostendpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hostendpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hostendpoint, submessage_arena);
    }
    set_has_hostendpoint();
  } else {
    clear_has_hostendpoint();
  }
  hostendpoint_ = hostendpoint;
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.protobuf.ServiceContract.hostEndpoint)
}

// repeated string commandID = 4;
inline int ServiceContract::commandid_size() const {
  return commandid_.size();
}
inline void ServiceContract::clear_commandid() {
  commandid_.Clear();
}
inline const ::std::string& ServiceContract::commandid(int index) const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceContract.commandID)
  return commandid_.Get(index);
}
inline ::std::string* ServiceContract::mutable_commandid(int index) {
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceContract.commandID)
  return commandid_.Mutable(index);
}
inline void ServiceContract::set_commandid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceContract.commandID)
  commandid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceContract::set_commandid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceContract.commandID)
  commandid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceContract::set_commandid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  commandid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
inline void ServiceContract::set_commandid(int index, const char* value, size_t size) {
  commandid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
inline ::std::string* ServiceContract::add_commandid() {
  // @@protoc_insertion_point(field_add_mutable:fnv.soa.framework.protobuf.ServiceContract.commandID)
  return commandid_.Add();
}
inline void ServiceContract::add_commandid(const ::std::string& value) {
  commandid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
#if LANG_CXX11
inline void ServiceContract::add_commandid(::std::string&& value) {
  commandid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
#endif
inline void ServiceContract::add_commandid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  commandid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
inline void ServiceContract::add_commandid(const char* value, size_t size) {
  commandid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fnv.soa.framework.protobuf.ServiceContract.commandID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceContract::commandid() const {
  // @@protoc_insertion_point(field_list:fnv.soa.framework.protobuf.ServiceContract.commandID)
  return commandid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceContract::mutable_commandid() {
  // @@protoc_insertion_point(field_mutable_list:fnv.soa.framework.protobuf.ServiceContract.commandID)
  return &commandid_;
}

// repeated string ftcpCommandID = 5;
inline int ServiceContract::ftcpcommandid_size() const {
  return ftcpcommandid_.size();
}
inline void ServiceContract::clear_ftcpcommandid() {
  ftcpcommandid_.Clear();
}
inline const ::std::string& ServiceContract::ftcpcommandid(int index) const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  return ftcpcommandid_.Get(index);
}
inline ::std::string* ServiceContract::mutable_ftcpcommandid(int index) {
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  return ftcpcommandid_.Mutable(index);
}
inline void ServiceContract::set_ftcpcommandid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  ftcpcommandid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceContract::set_ftcpcommandid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  ftcpcommandid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceContract::set_ftcpcommandid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ftcpcommandid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
inline void ServiceContract::set_ftcpcommandid(int index, const char* value, size_t size) {
  ftcpcommandid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
inline ::std::string* ServiceContract::add_ftcpcommandid() {
  // @@protoc_insertion_point(field_add_mutable:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  return ftcpcommandid_.Add();
}
inline void ServiceContract::add_ftcpcommandid(const ::std::string& value) {
  ftcpcommandid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
#if LANG_CXX11
inline void ServiceContract::add_ftcpcommandid(::std::string&& value) {
  ftcpcommandid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
#endif
inline void ServiceContract::add_ftcpcommandid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ftcpcommandid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
inline void ServiceContract::add_ftcpcommandid(const char* value, size_t size) {
  ftcpcommandid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceContract::ftcpcommandid() const {
  // @@protoc_insertion_point(field_list:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  return ftcpcommandid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceContract::mutable_ftcpcommandid() {
  // @@protoc_insertion_point(field_mutable_list:fnv.soa.framework.protobuf.ServiceContract.ftcpCommandID)
  return &ftcpcommandid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace framework
}  // namespace soa
}  // namespace fnv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceContract_2eproto__INCLUDED
