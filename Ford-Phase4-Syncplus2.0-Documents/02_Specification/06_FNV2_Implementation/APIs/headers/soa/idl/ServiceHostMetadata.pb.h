// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceHostMetadata.proto

#ifndef PROTOBUF_ServiceHostMetadata_2eproto__INCLUDED
#define PROTOBUF_ServiceHostMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ServiceContract.pb.h"  // IWYU pragma: export
#include "ServicePermissions.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ServiceHostMetadata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceHostMetadataProtoImpl();
void InitDefaultsServiceHostMetadataProto();
inline void InitDefaults() {
  InitDefaultsServiceHostMetadataProto();
}
}  // namespace protobuf_ServiceHostMetadata_2eproto
namespace fnv {
namespace soa {
namespace framework {
namespace protobuf {
class ServiceHostMetadataProto;
class ServiceHostMetadataProtoDefaultTypeInternal;
extern ServiceHostMetadataProtoDefaultTypeInternal _ServiceHostMetadataProto_default_instance_;
}  // namespace protobuf
}  // namespace framework
}  // namespace soa
}  // namespace fnv
namespace fnv {
namespace soa {
namespace framework {
namespace protobuf {

// ===================================================================

class ServiceHostMetadataProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fnv.soa.framework.protobuf.ServiceHostMetadataProto) */ {
 public:
  ServiceHostMetadataProto();
  virtual ~ServiceHostMetadataProto();

  ServiceHostMetadataProto(const ServiceHostMetadataProto& from);

  inline ServiceHostMetadataProto& operator=(const ServiceHostMetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceHostMetadataProto(ServiceHostMetadataProto&& from) noexcept
    : ServiceHostMetadataProto() {
    *this = ::std::move(from);
  }

  inline ServiceHostMetadataProto& operator=(ServiceHostMetadataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceHostMetadataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceHostMetadataProto* internal_default_instance() {
    return reinterpret_cast<const ServiceHostMetadataProto*>(
               &_ServiceHostMetadataProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceHostMetadataProto* other);
  friend void swap(ServiceHostMetadataProto& a, ServiceHostMetadataProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceHostMetadataProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceHostMetadataProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceHostMetadataProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fnv.soa.framework.protobuf.ServiceContract services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  const ::fnv::soa::framework::protobuf::ServiceContract& services(int index) const;
  ::fnv::soa::framework::protobuf::ServiceContract* mutable_services(int index);
  ::fnv::soa::framework::protobuf::ServiceContract* add_services();
  ::google::protobuf::RepeatedPtrField< ::fnv::soa::framework::protobuf::ServiceContract >*
      mutable_services();
  const ::google::protobuf::RepeatedPtrField< ::fnv::soa::framework::protobuf::ServiceContract >&
      services() const;

  // optional string host_id = 1;
  bool has_host_id() const;
  void clear_host_id();
  static const int kHostIdFieldNumber = 1;
  const ::std::string& host_id() const;
  void set_host_id(const ::std::string& value);
  #if LANG_CXX11
  void set_host_id(::std::string&& value);
  #endif
  void set_host_id(const char* value);
  void set_host_id(const char* value, size_t size);
  ::std::string* mutable_host_id();
  ::std::string* release_host_id();
  void set_allocated_host_id(::std::string* host_id);

  // optional .fnv.soa.framework.protobuf.ServicePermissions permissions = 3;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 3;
  const ::fnv::soa::framework::protobuf::ServicePermissions& permissions() const;
  ::fnv::soa::framework::protobuf::ServicePermissions* release_permissions();
  ::fnv::soa::framework::protobuf::ServicePermissions* mutable_permissions();
  void set_allocated_permissions(::fnv::soa::framework::protobuf::ServicePermissions* permissions);

  // @@protoc_insertion_point(class_scope:fnv.soa.framework.protobuf.ServiceHostMetadataProto)
 private:
  void set_has_host_id();
  void clear_has_host_id();
  void set_has_permissions();
  void clear_has_permissions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fnv::soa::framework::protobuf::ServiceContract > services_;
  ::google::protobuf::internal::ArenaStringPtr host_id_;
  ::fnv::soa::framework::protobuf::ServicePermissions* permissions_;
  friend struct ::protobuf_ServiceHostMetadata_2eproto::TableStruct;
  friend void ::protobuf_ServiceHostMetadata_2eproto::InitDefaultsServiceHostMetadataProtoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceHostMetadataProto

// optional string host_id = 1;
inline bool ServiceHostMetadataProto::has_host_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceHostMetadataProto::set_has_host_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceHostMetadataProto::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceHostMetadataProto::clear_host_id() {
  host_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_id();
}
inline const ::std::string& ServiceHostMetadataProto::host_id() const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
  return host_id_.GetNoArena();
}
inline void ServiceHostMetadataProto::set_host_id(const ::std::string& value) {
  set_has_host_id();
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
}
#if LANG_CXX11
inline void ServiceHostMetadataProto::set_host_id(::std::string&& value) {
  set_has_host_id();
  host_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
}
#endif
inline void ServiceHostMetadataProto::set_host_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_id();
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
}
inline void ServiceHostMetadataProto::set_host_id(const char* value, size_t size) {
  set_has_host_id();
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
}
inline ::std::string* ServiceHostMetadataProto::mutable_host_id() {
  set_has_host_id();
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
  return host_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceHostMetadataProto::release_host_id() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
  clear_has_host_id();
  return host_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceHostMetadataProto::set_allocated_host_id(::std::string* host_id) {
  if (host_id != NULL) {
    set_has_host_id();
  } else {
    clear_has_host_id();
  }
  host_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_id);
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.protobuf.ServiceHostMetadataProto.host_id)
}

// repeated .fnv.soa.framework.protobuf.ServiceContract services = 2;
inline int ServiceHostMetadataProto::services_size() const {
  return services_.size();
}
inline const ::fnv::soa::framework::protobuf::ServiceContract& ServiceHostMetadataProto::services(int index) const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceHostMetadataProto.services)
  return services_.Get(index);
}
inline ::fnv::soa::framework::protobuf::ServiceContract* ServiceHostMetadataProto::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceHostMetadataProto.services)
  return services_.Mutable(index);
}
inline ::fnv::soa::framework::protobuf::ServiceContract* ServiceHostMetadataProto::add_services() {
  // @@protoc_insertion_point(field_add:fnv.soa.framework.protobuf.ServiceHostMetadataProto.services)
  return services_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fnv::soa::framework::protobuf::ServiceContract >*
ServiceHostMetadataProto::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:fnv.soa.framework.protobuf.ServiceHostMetadataProto.services)
  return &services_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fnv::soa::framework::protobuf::ServiceContract >&
ServiceHostMetadataProto::services() const {
  // @@protoc_insertion_point(field_list:fnv.soa.framework.protobuf.ServiceHostMetadataProto.services)
  return services_;
}

// optional .fnv.soa.framework.protobuf.ServicePermissions permissions = 3;
inline bool ServiceHostMetadataProto::has_permissions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceHostMetadataProto::set_has_permissions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceHostMetadataProto::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fnv::soa::framework::protobuf::ServicePermissions& ServiceHostMetadataProto::permissions() const {
  const ::fnv::soa::framework::protobuf::ServicePermissions* p = permissions_;
  // @@protoc_insertion_point(field_get:fnv.soa.framework.protobuf.ServiceHostMetadataProto.permissions)
  return p != NULL ? *p : *reinterpret_cast<const ::fnv::soa::framework::protobuf::ServicePermissions*>(
      &::fnv::soa::framework::protobuf::_ServicePermissions_default_instance_);
}
inline ::fnv::soa::framework::protobuf::ServicePermissions* ServiceHostMetadataProto::release_permissions() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.protobuf.ServiceHostMetadataProto.permissions)
  clear_has_permissions();
  ::fnv::soa::framework::protobuf::ServicePermissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline ::fnv::soa::framework::protobuf::ServicePermissions* ServiceHostMetadataProto::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) {
    permissions_ = new ::fnv::soa::framework::protobuf::ServicePermissions;
  }
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.protobuf.ServiceHostMetadataProto.permissions)
  return permissions_;
}
inline void ServiceHostMetadataProto::set_allocated_permissions(::fnv::soa::framework::protobuf::ServicePermissions* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissions_);
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    set_has_permissions();
  } else {
    clear_has_permissions();
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.protobuf.ServiceHostMetadataProto.permissions)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace framework
}  // namespace soa
}  // namespace fnv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceHostMetadata_2eproto__INCLUDED
