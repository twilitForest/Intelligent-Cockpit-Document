// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: soa_lwt.proto

#ifndef PROTOBUF_soa_5flwt_2eproto__INCLUDED
#define PROTOBUF_soa_5flwt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_soa_5flwt_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSoaLwtProtoImpl();
void InitDefaultsSoaLwtProto();
inline void InitDefaults() {
  InitDefaultsSoaLwtProto();
}
}  // namespace protobuf_soa_5flwt_2eproto
namespace fnv {
namespace soa {
namespace framework {
class SoaLwtProto;
class SoaLwtProtoDefaultTypeInternal;
extern SoaLwtProtoDefaultTypeInternal _SoaLwtProto_default_instance_;
}  // namespace framework
}  // namespace soa
}  // namespace fnv
namespace fnv {
namespace soa {
namespace framework {

// ===================================================================

class SoaLwtProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fnv.soa.framework.SoaLwtProto) */ {
 public:
  SoaLwtProto();
  virtual ~SoaLwtProto();

  SoaLwtProto(const SoaLwtProto& from);

  inline SoaLwtProto& operator=(const SoaLwtProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoaLwtProto(SoaLwtProto&& from) noexcept
    : SoaLwtProto() {
    *this = ::std::move(from);
  }

  inline SoaLwtProto& operator=(SoaLwtProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoaLwtProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoaLwtProto* internal_default_instance() {
    return reinterpret_cast<const SoaLwtProto*>(
               &_SoaLwtProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SoaLwtProto* other);
  friend void swap(SoaLwtProto& a, SoaLwtProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoaLwtProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SoaLwtProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoaLwtProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string ecuId = 2;
  bool has_ecuid() const;
  void clear_ecuid();
  static const int kEcuIdFieldNumber = 2;
  const ::std::string& ecuid() const;
  void set_ecuid(const ::std::string& value);
  #if LANG_CXX11
  void set_ecuid(::std::string&& value);
  #endif
  void set_ecuid(const char* value);
  void set_ecuid(const char* value, size_t size);
  ::std::string* mutable_ecuid();
  ::std::string* release_ecuid();
  void set_allocated_ecuid(::std::string* ecuid);

  // optional int32 processID = 3 [default = -1];
  bool has_processid() const;
  void clear_processid();
  static const int kProcessIDFieldNumber = 3;
  ::google::protobuf::int32 processid() const;
  void set_processid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fnv.soa.framework.SoaLwtProto)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_ecuid();
  void clear_has_ecuid();
  void set_has_processid();
  void clear_has_processid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr ecuid_;
  ::google::protobuf::int32 processid_;
  friend struct ::protobuf_soa_5flwt_2eproto::TableStruct;
  friend void ::protobuf_soa_5flwt_2eproto::InitDefaultsSoaLwtProtoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoaLwtProto

// optional string clientId = 1;
inline bool SoaLwtProto::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoaLwtProto::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoaLwtProto::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoaLwtProto::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& SoaLwtProto::clientid() const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.SoaLwtProto.clientId)
  return clientid_.GetNoArena();
}
inline void SoaLwtProto::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fnv.soa.framework.SoaLwtProto.clientId)
}
#if LANG_CXX11
inline void SoaLwtProto::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fnv.soa.framework.SoaLwtProto.clientId)
}
#endif
inline void SoaLwtProto::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.SoaLwtProto.clientId)
}
inline void SoaLwtProto::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.SoaLwtProto.clientId)
}
inline ::std::string* SoaLwtProto::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.SoaLwtProto.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoaLwtProto::release_clientid() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.SoaLwtProto.clientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoaLwtProto::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.SoaLwtProto.clientId)
}

// optional string ecuId = 2;
inline bool SoaLwtProto::has_ecuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoaLwtProto::set_has_ecuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoaLwtProto::clear_has_ecuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoaLwtProto::clear_ecuid() {
  ecuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ecuid();
}
inline const ::std::string& SoaLwtProto::ecuid() const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.SoaLwtProto.ecuId)
  return ecuid_.GetNoArena();
}
inline void SoaLwtProto::set_ecuid(const ::std::string& value) {
  set_has_ecuid();
  ecuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fnv.soa.framework.SoaLwtProto.ecuId)
}
#if LANG_CXX11
inline void SoaLwtProto::set_ecuid(::std::string&& value) {
  set_has_ecuid();
  ecuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fnv.soa.framework.SoaLwtProto.ecuId)
}
#endif
inline void SoaLwtProto::set_ecuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ecuid();
  ecuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fnv.soa.framework.SoaLwtProto.ecuId)
}
inline void SoaLwtProto::set_ecuid(const char* value, size_t size) {
  set_has_ecuid();
  ecuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fnv.soa.framework.SoaLwtProto.ecuId)
}
inline ::std::string* SoaLwtProto::mutable_ecuid() {
  set_has_ecuid();
  // @@protoc_insertion_point(field_mutable:fnv.soa.framework.SoaLwtProto.ecuId)
  return ecuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoaLwtProto::release_ecuid() {
  // @@protoc_insertion_point(field_release:fnv.soa.framework.SoaLwtProto.ecuId)
  clear_has_ecuid();
  return ecuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoaLwtProto::set_allocated_ecuid(::std::string* ecuid) {
  if (ecuid != NULL) {
    set_has_ecuid();
  } else {
    clear_has_ecuid();
  }
  ecuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ecuid);
  // @@protoc_insertion_point(field_set_allocated:fnv.soa.framework.SoaLwtProto.ecuId)
}

// optional int32 processID = 3 [default = -1];
inline bool SoaLwtProto::has_processid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoaLwtProto::set_has_processid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoaLwtProto::clear_has_processid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoaLwtProto::clear_processid() {
  processid_ = -1;
  clear_has_processid();
}
inline ::google::protobuf::int32 SoaLwtProto::processid() const {
  // @@protoc_insertion_point(field_get:fnv.soa.framework.SoaLwtProto.processID)
  return processid_;
}
inline void SoaLwtProto::set_processid(::google::protobuf::int32 value) {
  set_has_processid();
  processid_ = value;
  // @@protoc_insertion_point(field_set:fnv.soa.framework.SoaLwtProto.processID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace framework
}  // namespace soa
}  // namespace fnv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_soa_5flwt_2eproto__INCLUDED
